{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SegmentedControlTab = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\erhan\\\\Documents\\\\GitHub\\\\React-Native-Applications\\\\Reciepent App\\\\node_modules\\\\@react-native-community\\\\segmented-control\\\\js\\\\SegmentedControlTab.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction isBase64(str) {\n  var regex = /^data:image\\/(?:gif|png|jpeg|bmp|webp)(?:;charset=utf-8)?;base64,(?:[A-Za-z0-9]|[+/])+={0,2}/;\n  return str && regex.test(str);\n}\n\nvar SegmentedControlTab = function SegmentedControlTab(_ref) {\n  var onSelect = _ref.onSelect,\n      value = _ref.value,\n      enabled = _ref.enabled,\n      selected = _ref.selected,\n      tintColor = _ref.tintColor,\n      _ref$fontStyle = _ref.fontStyle,\n      fontStyle = _ref$fontStyle === void 0 ? {} : _ref$fontStyle,\n      _ref$activeFontStyle = _ref.activeFontStyle,\n      activeFontStyle = _ref$activeFontStyle === void 0 ? {} : _ref$activeFontStyle,\n      appearance = _ref.appearance;\n  var colorSchemeHook = (0, _reactNative.useColorScheme)();\n  var colorScheme = appearance || colorSchemeHook;\n  var textColor = fontStyle.color,\n      fontSize = fontStyle.fontSize,\n      fontFamily = fontStyle.fontFamily,\n      fontWeight = fontStyle.fontWeight;\n  var activeColor = activeFontStyle.color,\n      activeFontSize = activeFontStyle.fontSize,\n      activeFontFamily = activeFontStyle.fontFamily,\n      activeFontWeight = activeFontStyle.fontWeight;\n\n  var getColor = function getColor() {\n    if (textColor) {\n      return textColor;\n    }\n\n    if (tintColor) {\n      return 'white';\n    }\n\n    return colorScheme === 'dark' ? '#FFF' : '#000';\n  };\n\n  var color = getColor();\n\n  var activeStyle = _objectSpread(_objectSpread({}, styles.activeText), {}, {\n    fontFamily: activeFontFamily || fontFamily,\n    fontSize: activeFontSize || fontSize,\n    color: activeColor || color,\n    fontWeight: activeFontWeight || fontWeight || styles.activeText.fontWeight\n  });\n\n  var idleStyle = {\n    color: color,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight\n  };\n  return React.createElement(_reactNative.TouchableOpacity, {\n    style: styles.container,\n    disabled: !enabled,\n    onPress: onSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.View, {\n    style: [styles.default],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, typeof value === 'number' || typeof value === 'object' ? React.createElement(_reactNative.Image, {\n    source: value,\n    style: styles.segmentImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }) : isBase64(value) ? React.createElement(_reactNative.Image, {\n    source: {\n      uri: value\n    },\n    style: styles.segmentImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }) : React.createElement(_reactNative.Text, {\n    style: [idleStyle, selected && activeStyle],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, value)));\n};\n\nexports.SegmentedControlTab = SegmentedControlTab;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    borderRadius: 5\n  },\n  default: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 2,\n    borderRadius: 5\n  },\n  activeText: {\n    fontWeight: '700'\n  },\n  segmentImage: {\n    width: 17,\n    height: 17,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"sources":["C:/Users/erhan/Documents/GitHub/React-Native-Applications/Reciepent App/node_modules/@react-native-community/segmented-control/js/SegmentedControlTab.js"],"names":["isBase64","str","regex","test","SegmentedControlTab","onSelect","value","enabled","selected","tintColor","fontStyle","activeFontStyle","appearance","colorSchemeHook","colorScheme","textColor","color","fontSize","fontFamily","fontWeight","activeColor","activeFontSize","activeFontFamily","activeFontWeight","getColor","activeStyle","styles","activeText","idleStyle","container","default","segmentImage","uri","StyleSheet","create","flex","borderRadius","justifyContent","alignItems","margin","width","height","resizeMode"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\n\nimport {\n  Image,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  useColorScheme,\n} from 'react-native';\n\nimport type {FontStyle} from './types';\n\ntype Props = $ReadOnly<{|\n  value: string | number | Object,\n  tintColor?: ?string,\n  onSelect: () => void,\n  selected: boolean,\n  enabled: boolean,\n  fontStyle?: FontStyle,\n  activeFontStyle?: FontStyle,\n  appearance?: 'dark' | 'light' | null,\n|}>;\n\nfunction isBase64(str) {\n  const regex = /^data:image\\/(?:gif|png|jpeg|bmp|webp)(?:;charset=utf-8)?;base64,(?:[A-Za-z0-9]|[+/])+={0,2}/;\n  return str && regex.test(str);\n}\n\nexport const SegmentedControlTab = ({\n  onSelect,\n  value,\n  enabled,\n  selected,\n  tintColor,\n  fontStyle = {},\n  activeFontStyle = {},\n  appearance,\n}: Props): React.Node => {\n  const colorSchemeHook = useColorScheme();\n  const colorScheme = appearance || colorSchemeHook;\n  const {color: textColor, fontSize, fontFamily, fontWeight} = fontStyle;\n\n  const {\n    color: activeColor,\n    fontSize: activeFontSize,\n    fontFamily: activeFontFamily,\n    fontWeight: activeFontWeight,\n  } = activeFontStyle;\n\n  const getColor = () => {\n    if (textColor) {\n      return textColor;\n    }\n    if (tintColor) {\n      return 'white';\n    }\n    return colorScheme === 'dark' ? '#FFF' : '#000';\n  };\n  const color = getColor();\n\n  const activeStyle = {\n    ...styles.activeText,\n    fontFamily: activeFontFamily || fontFamily,\n    fontSize: activeFontSize || fontSize,\n    color: activeColor || color,\n    fontWeight: activeFontWeight || fontWeight || styles.activeText.fontWeight,\n  };\n\n  const idleStyle = {\n    color,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n  };\n\n  return (\n    <TouchableOpacity\n      style={styles.container}\n      disabled={!enabled}\n      onPress={onSelect}>\n      <View style={[styles.default]}>\n        {typeof value === 'number' || typeof value === 'object' ? (\n          <Image source={value} style={styles.segmentImage} />\n        ) : isBase64(value) ? (\n          <Image source={{uri: value}} style={styles.segmentImage} />\n        ) : (\n          <Text style={[idleStyle, selected && activeStyle]}>{value}</Text>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {flex: 1, borderRadius: 5},\n  default: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 2,\n    borderRadius: 5,\n  },\n  activeText: {\n    fontWeight: '700',\n  },\n  segmentImage: {\n    width: 17,\n    height: 17,\n    resizeMode: 'contain',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}