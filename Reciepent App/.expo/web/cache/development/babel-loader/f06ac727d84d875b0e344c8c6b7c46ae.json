{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\erhan\\\\Documents\\\\GitHub\\\\React-Native-Applications\\\\Reciepent App\\\\node_modules\\\\@react-native-community\\\\segmented-control\\\\js\\\\SegmentedControl.js\";\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { SegmentedControlTab } from \"./SegmentedControlTab\";\nimport { SegmentsSeparators } from \"./SegmentsSeparators\";\n\nvar SegmentedControl = function SegmentedControl(_ref) {\n  var style = _ref.style,\n      onChange = _ref.onChange,\n      onValueChange = _ref.onValueChange,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      selectedIndex = _ref.selectedIndex,\n      values = _ref.values,\n      tintColor = _ref.tintColor,\n      backgroundColor = _ref.backgroundColor,\n      fontStyle = _ref.fontStyle,\n      activeFontStyle = _ref.activeFontStyle,\n      appearance = _ref.appearance;\n  var colorSchemeHook = useColorScheme();\n  var colorScheme = appearance || colorSchemeHook;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      segmentWidth = _React$useState2[0],\n      setSegmentWidth = _React$useState2[1];\n\n  var animation = React.useRef(new Animated.Value(0)).current;\n\n  var handleChange = function handleChange(index) {\n    var event = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index\n      }\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(function () {\n    if (animation && segmentWidth) {\n      var isRTL = I18nManager.isRTL ? -segmentWidth : segmentWidth;\n      Animated.timing(animation, {\n        toValue: isRTL * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n  return React.createElement(View, {\n    style: [styles.default, style, colorScheme === 'dark' && styles.darkControl, backgroundColor && {\n      backgroundColor: backgroundColor\n    }, !enabled && styles.disabled],\n    onLayout: function onLayout(_ref2) {\n      var width = _ref2.nativeEvent.layout.width;\n      var newSegmentWidth = values.length ? width / values.length : 0;\n\n      if (newSegmentWidth !== segmentWidth) {\n        animation.setValue(newSegmentWidth * (selectedIndex || 0));\n        setSegmentWidth(newSegmentWidth);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, !backgroundColor && !tintColor && React.createElement(SegmentsSeparators, {\n    values: values.length,\n    selectedIndex: selectedIndex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.segmentsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, values && values.map(function (value, index) {\n    return React.createElement(SegmentedControlTab, {\n      enabled: enabled,\n      selected: selectedIndex === index,\n      key: index,\n      value: value,\n      tintColor: tintColor,\n      fontStyle: fontStyle,\n      activeFontStyle: activeFontStyle,\n      appearance: colorScheme,\n      onSelect: function onSelect() {\n        handleChange(index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    });\n  })), selectedIndex != null && segmentWidth ? React.createElement(Animated.View, {\n    style: [styles.slider, {\n      transform: [{\n        translateX: animation\n      }],\n      width: segmentWidth - 4,\n      backgroundColor: tintColor || (colorScheme === 'dark' ? '#636366' : 'white')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nvar styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    height: 32,\n    backgroundColor: '#EEEEF0',\n    borderRadius: 9\n  },\n  darkControl: {\n    backgroundColor: '#1C1C1F'\n  },\n  disabled: {\n    opacity: 0.4\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 7,\n    top: 2,\n    bottom: 2,\n    right: 2,\n    left: 2,\n    borderWidth: 0.5,\n    borderColor: 'rgba(0,0,0,0.04)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3\n  },\n  segmentsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    elevation: 5,\n    backgroundColor: 'transparent',\n    zIndex: 99\n  }\n});\nexport default SegmentedControl;","map":{"version":3,"sources":["C:/Users/erhan/Documents/GitHub/React-Native-Applications/Reciepent App/node_modules/@react-native-community/segmented-control/js/SegmentedControl.js"],"names":["React","SegmentedControlTab","SegmentsSeparators","SegmentedControl","style","onChange","onValueChange","enabled","selectedIndex","values","tintColor","backgroundColor","fontStyle","activeFontStyle","appearance","colorSchemeHook","useColorScheme","colorScheme","useState","segmentWidth","setSegmentWidth","animation","useRef","Animated","Value","current","handleChange","index","event","nativeEvent","value","selectedSegmentIndex","useEffect","isRTL","I18nManager","timing","toValue","duration","easing","Easing","out","quad","useNativeDriver","start","styles","default","darkControl","disabled","width","layout","newSegmentWidth","length","setValue","segmentsContainer","map","slider","transform","translateX","StyleSheet","create","overflow","position","height","borderRadius","opacity","top","bottom","right","left","borderWidth","borderColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","flex","flexDirection","justifyContent","alignItems","zIndex"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\n\nimport {\n  Animated,\n  Easing,\n  I18nManager,\n  StyleSheet,\n  View,\n  useColorScheme,\n} from 'react-native';\n\nimport type {SegmentedControlProps} from './types';\nimport {SegmentedControlTab} from './SegmentedControlTab';\nimport {SegmentsSeparators} from './SegmentsSeparators';\n\n/**\n * SegmentedControl\n * iOS 13 Style UISegmentedControl Component for Android and Web\n */\nconst SegmentedControl = ({\n  style,\n  onChange,\n  onValueChange,\n  enabled = true,\n  selectedIndex,\n  values,\n  tintColor,\n  backgroundColor,\n  fontStyle,\n  activeFontStyle,\n  appearance,\n}: SegmentedControlProps): React.Node => {\n  const colorSchemeHook = useColorScheme();\n  const colorScheme = appearance || colorSchemeHook;\n  const [segmentWidth, setSegmentWidth] = React.useState(0);\n  const animation = React.useRef(new Animated.Value(0)).current;\n\n  const handleChange = (index: number) => {\n    // mocks iOS's nativeEvent\n    const event: any = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index,\n      },\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(() => {\n    if (animation && segmentWidth) {\n      let isRTL = I18nManager.isRTL ? -segmentWidth : segmentWidth;\n      Animated.timing(animation, {\n        toValue: isRTL * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n\n  return (\n    <View\n      style={[\n        styles.default,\n        style,\n        colorScheme === 'dark' && styles.darkControl,\n        backgroundColor && {backgroundColor},\n        !enabled && styles.disabled,\n      ]}\n      onLayout={({\n        nativeEvent: {\n          layout: {width},\n        },\n      }) => {\n        const newSegmentWidth = values.length ? width / values.length : 0;\n        if (newSegmentWidth !== segmentWidth) {\n          animation.setValue(newSegmentWidth * (selectedIndex || 0));\n          setSegmentWidth(newSegmentWidth);\n        }\n      }}>\n      {!backgroundColor && !tintColor && (\n        <SegmentsSeparators\n          values={values.length}\n          selectedIndex={selectedIndex}\n        />\n      )}\n      <View style={styles.segmentsContainer}>\n        {values &&\n          values.map((value, index) => {\n            return (\n              <SegmentedControlTab\n                enabled={enabled}\n                selected={selectedIndex === index}\n                key={index}\n                value={value}\n                tintColor={tintColor}\n                fontStyle={fontStyle}\n                activeFontStyle={activeFontStyle}\n                appearance={colorScheme}\n                onSelect={() => {\n                  handleChange(index);\n                }}\n              />\n            );\n          })}\n      </View>\n      {selectedIndex != null && segmentWidth ? (\n        <Animated.View\n          style={[\n            styles.slider,\n            {\n              transform: [{translateX: animation}],\n              width: segmentWidth - 4,\n              backgroundColor:\n                tintColor || (colorScheme === 'dark' ? '#636366' : 'white'),\n            },\n          ]}\n        />\n      ) : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    height: 32,\n    backgroundColor: '#EEEEF0',\n    borderRadius: 9,\n  },\n  darkControl: {\n    backgroundColor: '#1C1C1F',\n  },\n  disabled: {\n    opacity: 0.4,\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 7,\n    top: 2,\n    bottom: 2,\n    right: 2,\n    left: 2,\n    borderWidth: 0.5,\n    borderColor: 'rgba(0,0,0,0.04)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3,\n  },\n  segmentsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    elevation: 5,\n    backgroundColor: 'transparent',\n    zIndex: 99,\n  },\n});\n\nexport default SegmentedControl;\n"]},"metadata":{},"sourceType":"module"}