{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _nativeInterface = _interopRequireDefault(require(\"./nativeInterface\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All',\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos'\n};\nvar ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos'\n};\n\nvar CameraRoll = function () {\n  function CameraRoll() {\n    (0, _classCallCheck2.default)(this, CameraRoll);\n  }\n\n  (0, _createClass2.default)(CameraRoll, null, [{\n    key: \"saveImageWithTag\",\n    value: function saveImageWithTag(tag) {\n      console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');\n      return this.saveToCameraRoll(tag, 'photo');\n    }\n  }, {\n    key: \"deletePhotos\",\n    value: function deletePhotos(photoUris) {\n      return _nativeInterface.default.deletePhotos(photoUris);\n    }\n  }, {\n    key: \"save\",\n    value: function save(tag) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$type = options.type,\n          type = _options$type === void 0 ? 'auto' : _options$type,\n          _options$album = options.album,\n          album = _options$album === void 0 ? '' : _options$album;\n      invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');\n      invariant(options.type === 'photo' || options.type === 'video' || options.type === 'auto' || options.type === undefined, \"The second argument to saveToCameraRoll must be 'photo' or 'video' or 'auto'. You passed \" + (type || 'unknown'));\n\n      if (type === 'auto') {\n        if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {\n          type = 'video';\n        } else {\n          type = 'photo';\n        }\n      }\n\n      return _nativeInterface.default.saveToCameraRoll(tag, {\n        type: type,\n        album: album\n      });\n    }\n  }, {\n    key: \"saveToCameraRoll\",\n    value: function saveToCameraRoll(tag, type) {\n      console.warn('CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead');\n      return CameraRoll.save(tag, {\n        type: type\n      });\n    }\n  }, {\n    key: \"getAlbums\",\n    value: function getAlbums() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        assetType: ASSET_TYPE_OPTIONS.All\n      };\n      return _nativeInterface.default.getAlbums(params);\n    }\n  }, {\n    key: \"getParamsWithDefaults\",\n    value: function getParamsWithDefaults(params) {\n      var newParams = _objectSpread({}, params);\n\n      if (!newParams.assetType) {\n        newParams.assetType = ASSET_TYPE_OPTIONS.All;\n      }\n\n      if (!newParams.groupTypes && _reactNative.Platform.OS !== 'android') {\n        newParams.groupTypes = GROUP_TYPES_OPTIONS.All;\n      }\n\n      return newParams;\n    }\n  }, {\n    key: \"getPhotos\",\n    value: function getPhotos(params) {\n      params = CameraRoll.getParamsWithDefaults(params);\n\n      var promise = _nativeInterface.default.getPhotos(params);\n\n      if (arguments.length > 1) {\n        console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');\n        var successCallback = arguments[1];\n\n        var errorCallback = arguments[2] || function () {};\n\n        promise.then(successCallback, errorCallback);\n      }\n\n      return promise;\n    }\n  }]);\n  return CameraRoll;\n}();\n\nCameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;\nCameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;\nmodule.exports = CameraRoll;","map":{"version":3,"sources":["C:/Users/erhan/Documents/GitHub/React-Native-Applications/Reciepent App/node_modules/@react-native-community/cameraroll/js/CameraRoll.js"],"names":["invariant","require","GROUP_TYPES_OPTIONS","Album","All","Event","Faces","Library","PhotoStream","SavedPhotos","ASSET_TYPE_OPTIONS","Videos","Photos","CameraRoll","tag","console","warn","saveToCameraRoll","photoUris","RNCCameraRoll","deletePhotos","options","type","album","undefined","indexOf","split","slice","save","params","assetType","getAlbums","newParams","groupTypes","Platform","OS","getParamsWithDefaults","promise","getPhotos","arguments","length","successCallback","errorCallback","then","GroupTypesOptions","AssetTypeOptions","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\nimport {Platform} from 'react-native';\nimport RNCCameraRoll from './nativeInterface';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All', // default\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos',\n};\n\nconst ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos',\n};\n\nexport type GroupTypes = $Keys<typeof GROUP_TYPES_OPTIONS>;\n\nexport type Include =\n  | 'filename'\n  | 'fileSize'\n  | 'location'\n  | 'imageSize'\n  | 'playableDuration';\n\n/**\n * Shape of the param arg for the `getPhotos` function.\n */\nexport type GetPhotosParams = {\n  /**\n   * The number of photos wanted in reverse order of the photo application\n   * (i.e. most recent first).\n   */\n  first: number,\n\n  /**\n   * A cursor that matches `page_info { end_cursor }` returned from a previous\n   * call to `getPhotos`\n   */\n  after?: string,\n\n  /**\n   * Specifies which group types to filter the results to.\n   */\n  groupTypes?: GroupTypes,\n\n  /**\n   * Specifies filter on group names, like 'Recent Photos' or custom album\n   * titles.\n   */\n  groupName?: string,\n\n  /**\n   * Specifies filter on asset type\n   */\n  assetType?: $Keys<typeof ASSET_TYPE_OPTIONS>,\n\n  /**\n   * Earliest time to get photos from. A timestamp in milliseconds. Exclusive.\n   */\n  fromTime?: number,\n\n  /**\n   * Latest time to get photos from. A timestamp in milliseconds. Inclusive.\n   */\n  toTime?: Number,\n\n  /**\n   * Filter by mimetype (e.g. image/jpeg).\n   */\n  mimeTypes?: Array<string>,\n\n  /**\n   * Specific fields in the output that we want to include, even though they\n   * might have some performance impact.\n   */\n  include?: Include[],\n};\n\nexport type PhotoIdentifier = {\n  node: {\n    type: string,\n    group_name: string,\n    image: {\n      filename: string | null,\n      uri: string,\n      height: number,\n      width: number,\n      fileSize: number | null,\n      playableDuration: number,\n    },\n    timestamp: number,\n    location: {\n      latitude?: number,\n      longitude?: number,\n      altitude?: number,\n      heading?: number,\n      speed?: number,\n    } | null,\n  },\n};\n\nexport type PhotoIdentifiersPage = {\n  edges: Array<PhotoIdentifier>,\n  page_info: {\n    has_next_page: boolean,\n    start_cursor?: string,\n    end_cursor?: string,\n  },\n};\nexport type SaveToCameraRollOptions = {\n  type?: 'photo' | 'video' | 'auto',\n  album?: string,\n};\n\nexport type GetAlbumsParams = {\n  assetType?: $Keys<typeof ASSET_TYPE_OPTIONS>,\n};\n\nexport type Album = {\n  title: string,\n  count: number,\n};\n\n/**\n * `CameraRoll` provides access to the local camera roll or photo library.\n *\n * See https://facebook.github.io/react-native/docs/cameraroll.html\n */\nclass CameraRoll {\n  static GroupTypesOptions = GROUP_TYPES_OPTIONS;\n  static AssetTypeOptions = ASSET_TYPE_OPTIONS;\n\n  /**\n   * `CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.\n   */\n  static saveImageWithTag(tag: string): Promise<string> {\n    console.warn(\n      '`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.',\n    );\n    return this.saveToCameraRoll(tag, 'photo');\n  }\n\n  /**\n   * On iOS: requests deletion of a set of photos from the camera roll.\n   * On Android: Deletes a set of photos from the camera roll.\n   *\n   */\n  static deletePhotos(photoUris: Array<string>) {\n    return RNCCameraRoll.deletePhotos(photoUris);\n  }\n\n  /**\n   * Saves the photo or video to the camera roll or photo library.\n   *\n   */\n  static save(\n    tag: string,\n    options: SaveToCameraRollOptions = {},\n  ): Promise<string> {\n    let {type = 'auto', album = ''} = options;\n    invariant(\n      typeof tag === 'string',\n      'CameraRoll.saveToCameraRoll must be a valid string.',\n    );\n    invariant(\n      options.type === 'photo' ||\n        options.type === 'video' ||\n        options.type === 'auto' ||\n        options.type === undefined,\n      `The second argument to saveToCameraRoll must be 'photo' or 'video' or 'auto'. You passed ${type ||\n        'unknown'}`,\n    );\n    if (type === 'auto') {\n      if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {\n        type = 'video';\n      } else {\n        type = 'photo';\n      }\n    }\n    return RNCCameraRoll.saveToCameraRoll(tag, {type, album});\n  }\n  static saveToCameraRoll(\n    tag: string,\n    type?: 'photo' | 'video' | 'auto',\n  ): Promise<string> {\n    console.warn(\n      'CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead',\n    );\n    return CameraRoll.save(tag, {type});\n  }\n  static getAlbums(\n    params?: GetAlbumsParams = {assetType: ASSET_TYPE_OPTIONS.All},\n  ): Promise<Album[]> {\n    return RNCCameraRoll.getAlbums(params);\n  }\n\n  static getParamsWithDefaults(params: GetPhotosParams): GetPhotosParams {\n    const newParams = {...params};\n    if (!newParams.assetType) {\n      newParams.assetType = ASSET_TYPE_OPTIONS.All;\n    }\n    if (!newParams.groupTypes && Platform.OS !== 'android') {\n      newParams.groupTypes = GROUP_TYPES_OPTIONS.All;\n    }\n    return newParams;\n  }\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * See https://facebook.github.io/react-native/docs/cameraroll.html#getphotos\n   */\n  static getPhotos(params: GetPhotosParams): Promise<PhotoIdentifiersPage> {\n    params = CameraRoll.getParamsWithDefaults(params);\n    const promise = RNCCameraRoll.getPhotos(params);\n\n    if (arguments.length > 1) {\n      console.warn(\n        'CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead',\n      );\n      let successCallback = arguments[1];\n      const errorCallback = arguments[2] || (() => {});\n      promise.then(successCallback, errorCallback);\n    }\n\n    return promise;\n  }\n}\n\nmodule.exports = CameraRoll;\n"]},"metadata":{},"sourceType":"script"}